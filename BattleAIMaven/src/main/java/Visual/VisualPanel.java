package Visual;

import Console.ConsoleFrame;
import Constants.PathConstants;
import Engine.Bullet;
import Engine.DragosTank;
import Engine.Tank;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;
import java.util.Random;
import javax.imageio.ImageIO;

/**
 *
 * @author Liviu
 */
public class VisualPanel extends javax.swing.JPanel {

    private long lastTime, totalTime, frames, totalFrames;
    Animator animator;
    List<Tank> tanks = Collections.synchronizedList(new LinkedList<Tank>());
    final List<Bullet> bullets = Collections.synchronizedList(new LinkedList<Bullet>());
    private final Semafoare semafoare = new Semafoare();
    private static int nrTank = 0;
    
    /**
     * Creates new form VisualPanel
     */ 
    public static Image tankSprite, cannonSprite, bulletSprite;
    public static ArrayList<Thread> tankThreads = new ArrayList<>();
    public VisualPanel() {
        initComponents();
        
        try {
            tankSprite = ImageIO.read(new File(PathConstants.TANK_BODY_SPRITE_PATH));
            cannonSprite = ImageIO.read(new File(PathConstants.TANK_CANNON_SPRITE_PATH));
            bulletSprite = ImageIO.read(new File(PathConstants.BULLET_SPRITE_PATH));
        } catch (IOException ex) {
            ConsoleFrame.sendMessage("VisualPanel", "Failed to get sprites");
        }
        DragosTank tank = new DragosTank();
        setupTank(tank);
        tankThreads.add(new Thread(tank));
        tanks.add(tank);
        for(Tank aux:tanks){
            System.out.println(aux);
        }
        
        animator = new Animator(this, tanks, bullets, tankThreads, semafoare);
    }
    
    /**
     *
     * @param tank
     */
    public final void setupTank(Tank tank){
        tank.setX(new Random().nextInt(400)+100);
        tank.setY(new Random().nextInt(400)+100);
        semafoare.addReady();
        tank.setSemafoare(semafoare, nrTank);
        nrTank++;
    }
    
    @Override
    public void paintComponent(Graphics g){
        g.setColor(Color.CYAN);
        g.fillRect(0, 0, this.getWidth(), this.getHeight());
        
        ((Graphics2D)g).setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        ((Graphics2D)g).setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BICUBIC);
        
        //drawing all the stuff
        //drawing the tanks first
        for (Tank tankAux : tanks) {
            tankAux.draw(g);
        }
        
        //bullets drawn on top of the tanks
        synchronized(bullets){
            for (Bullet bulletAux : bullets) {
                bulletAux.draw(g);
            }
        }
        
        
        long currentTime = System.currentTimeMillis();
        totalTime += lastTime == 0 ? 0 : currentTime - lastTime;
        lastTime = currentTime;
        frames++;
        
        if(totalTime >= 1000){
            totalFrames = totalTime > 1000 && frames > 60 ? 60 : frames;
            frames = 0;
            totalTime = 0;
        }
        
        g.setColor(Color.BLACK);
        g.drawString("FPS: "+totalFrames, 2, 11);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setMaximumSize(new Dimension(Constants.VisualConstants.ENGINE_WIDTH, Constants.VisualConstants.ENGINE_HEIGHT));
        setMinimumSize(new Dimension(Constants.VisualConstants.ENGINE_WIDTH, Constants.VisualConstants.ENGINE_HEIGHT));
        setPreferredSize(new Dimension(Constants.VisualConstants.ENGINE_WIDTH, Constants.VisualConstants.ENGINE_HEIGHT));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
